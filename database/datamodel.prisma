type User {
  id: ID! @unique
  email: String! @unique
  password: String!
  nickname: String! @unique
  firstName: String
  lastName: String
  friendRequestsEmitted: [FriendRequest!]!
    @relation(name: "FriendRequestEmitter", onDelete: CASCADE)
  friendRequestsReceived: [FriendRequest!]!
    @relation(name: "FriendRequestReceiver", onDelete: CASCADE)
  movieLinks: [MovieLink!]!
    @relation(name: "UserToMovieLink", onDelete: CASCADE)
  rooms: [Room!]! @relation(name: "RoomMembership")
  ownedRooms: [Room!]! @relation(name: "RoomOwner", onDelete: CASCADE)
  createdAt: DateTime!
}

type FriendRequest {
  id: ID! @unique
  source: User! @relation(name: "FriendRequestEmitter")
  target: User! @relation(name: "FriendRequestReceiver")
  status: FriendRequestStatus! @default(value: PENDING)
  createdAt: DateTime!
}

type MovieLink {
  watched: Boolean! @default(value: false)
  watchlisted: Boolean! @default(value: false)
  movie: Movie! @relation(name: "MovieToMovieLink")
  user: User! @relation(name: "UserToMovieLink")
}

type Movie {
  id: ID! @unique
  tmdbId: String @unique
  imdbId: String @unique
  traktId: String @unique
  movieLinks: [MovieLink!]!
    @relation(name: "MovieToMovieLink", onDelete: CASCADE)
  createdAt: DateTime!
}

type Room {
  id: ID! @unique
  type: RoomType!
  name: String!
  owner: User! @relation(name: "RoomOwner")
  members: [User!]! @relation(name: "RoomMembership")
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum RoomType {
  MOVIE
}

enum FriendRequestStatus {
  PENDING
  APPROUVED
  BLOCKED
}
