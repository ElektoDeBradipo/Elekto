// Code generated by Prisma (prisma@1.18.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from 'graphql';
import { IResolvers } from 'graphql-tools/dist/Interfaces';
import { makePrismaClientClass, BaseClientOptions } from 'prisma-client-lib';
import { typeDefs } from './prisma-schema';

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  friendRequest: (where?: FriendRequestWhereInput) => Promise<boolean>;
  movie: (where?: MovieWhereInput) => Promise<boolean>;
  movieLink: (where?: MovieLinkWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any },
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  friendRequest: (where: FriendRequestWhereUniqueInput) => FriendRequest;
  friendRequests: (
    args?: {
      where?: FriendRequestWhereInput;
      orderBy?: FriendRequestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => FragmentableArray<FriendRequestNode>;
  friendRequestsConnection: (
    args?: {
      where?: FriendRequestWhereInput;
      orderBy?: FriendRequestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => FriendRequestConnection;
  movie: (where: MovieWhereUniqueInput) => Movie;
  movies: (
    args?: {
      where?: MovieWhereInput;
      orderBy?: MovieOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => FragmentableArray<MovieNode>;
  moviesConnection: (
    args?: {
      where?: MovieWhereInput;
      orderBy?: MovieOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => MovieConnection;
  movieLinks: (
    args?: {
      where?: MovieLinkWhereInput;
      orderBy?: MovieLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => FragmentableArray<MovieLinkNode>;
  movieLinksConnection: (
    args?: {
      where?: MovieLinkWhereInput;
      orderBy?: MovieLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => MovieLinkConnection;
  room: (where: RoomWhereUniqueInput) => Room;
  rooms: (
    args?: {
      where?: RoomWhereInput;
      orderBy?: RoomOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => FragmentableArray<RoomNode>;
  roomsConnection: (
    args?: {
      where?: RoomWhereInput;
      orderBy?: RoomOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => RoomConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFriendRequest: (data: FriendRequestCreateInput) => FriendRequest;
  updateFriendRequest: (
    args: {
      data: FriendRequestUpdateInput;
      where: FriendRequestWhereUniqueInput;
    },
  ) => FriendRequest;
  updateManyFriendRequests: (
    args: { data: FriendRequestUpdateInput; where?: FriendRequestWhereInput },
  ) => BatchPayload;
  upsertFriendRequest: (
    args: {
      where: FriendRequestWhereUniqueInput;
      create: FriendRequestCreateInput;
      update: FriendRequestUpdateInput;
    },
  ) => FriendRequest;
  deleteFriendRequest: (where: FriendRequestWhereUniqueInput) => FriendRequest;
  deleteManyFriendRequests: (where?: FriendRequestWhereInput) => BatchPayload;
  createMovie: (data: MovieCreateInput) => Movie;
  updateMovie: (
    args: { data: MovieUpdateInput; where: MovieWhereUniqueInput },
  ) => Movie;
  updateManyMovies: (
    args: { data: MovieUpdateInput; where?: MovieWhereInput },
  ) => BatchPayload;
  upsertMovie: (
    args: {
      where: MovieWhereUniqueInput;
      create: MovieCreateInput;
      update: MovieUpdateInput;
    },
  ) => Movie;
  deleteMovie: (where: MovieWhereUniqueInput) => Movie;
  deleteManyMovies: (where?: MovieWhereInput) => BatchPayload;
  createMovieLink: (data: MovieLinkCreateInput) => MovieLink;
  updateManyMovieLinks: (
    args: { data: MovieLinkUpdateInput; where?: MovieLinkWhereInput },
  ) => BatchPayload;
  deleteManyMovieLinks: (where?: MovieLinkWhereInput) => BatchPayload;
  createRoom: (data: RoomCreateInput) => Room;
  updateRoom: (
    args: { data: RoomUpdateInput; where: RoomWhereUniqueInput },
  ) => Room;
  updateManyRooms: (
    args: { data: RoomUpdateInput; where?: RoomWhereInput },
  ) => BatchPayload;
  upsertRoom: (
    args: {
      where: RoomWhereUniqueInput;
      create: RoomCreateInput;
      update: RoomUpdateInput;
    },
  ) => Room;
  deleteRoom: (where: RoomWhereUniqueInput) => Room;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput },
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput },
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    },
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  friendRequest: (
    where?: FriendRequestSubscriptionWhereInput,
  ) => FriendRequestSubscriptionPayloadSubscription;
  movie: (
    where?: MovieSubscriptionWhereInput,
  ) => MovieSubscriptionPayloadSubscription;
  movieLink: (
    where?: MovieLinkSubscriptionWhereInput,
  ) => MovieLinkSubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput,
  ) => RoomSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput,
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RoomType = 'MOVIE';

export type FriendRequestStatus = 'PENDING' | 'APPROUVED' | 'BLOCKED';

export type FriendRequestOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type MovieLinkOrderByInput =
  | 'watched_ASC'
  | 'watched_DESC'
  | 'watchlisted_ASC'
  | 'watchlisted_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type RoomOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'type_ASC'
  | 'type_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'nickname_ASC'
  | 'nickname_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type MovieOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'tmdbId_ASC'
  | 'tmdbId_DESC'
  | 'imdbId_ASC'
  | 'imdbId_DESC'
  | 'traktId_ASC'
  | 'traktId_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export interface UserUpdateWithoutFriendRequestsEmittedDataInput {
  email?: String;
  password?: String;
  nickname?: String;
  firstName?: String;
  lastName?: String;
  friendRequestsReceived?: FriendRequestUpdateManyWithoutTargetInput;
  movieLinks?: MovieLinkUpdateManyWithoutUserInput;
  rooms?: RoomUpdateManyWithoutMembersInput;
  ownedRooms?: RoomUpdateManyWithoutOwnerInput;
}

export type FriendRequestWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface RoomCreateWithoutMembersInput {
  type: RoomType;
  name: String;
  owner: UserCreateOneWithoutOwnedRoomsInput;
}

export interface UserUpsertWithoutFriendRequestsEmittedInput {
  update: UserUpdateWithoutFriendRequestsEmittedDataInput;
  create: UserCreateWithoutFriendRequestsEmittedInput;
}

export interface UserCreateOneWithoutOwnedRoomsInput {
  create?: UserCreateWithoutOwnedRoomsInput;
  connect?: UserWhereUniqueInput;
}

export interface MovieLinkUpdateManyWithoutUserInput {
  create?: MovieLinkCreateWithoutUserInput[] | MovieLinkCreateWithoutUserInput;
}

export interface UserCreateWithoutOwnedRoomsInput {
  email: String;
  password: String;
  nickname: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestCreateManyWithoutSourceInput;
  friendRequestsReceived?: FriendRequestCreateManyWithoutTargetInput;
  movieLinks?: MovieLinkCreateManyWithoutUserInput;
  rooms?: RoomCreateManyWithoutMembersInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface FriendRequestCreateManyWithoutSourceInput {
  create?:
    | FriendRequestCreateWithoutSourceInput[]
    | FriendRequestCreateWithoutSourceInput;
  connect?: FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RoomWhereInput;
  AND?: RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput;
  OR?: RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput;
  NOT?: RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput;
}

export interface FriendRequestCreateWithoutSourceInput {
  target: UserCreateOneWithoutFriendRequestsReceivedInput;
  status?: FriendRequestStatus;
}

export interface MovieLinkSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MovieLinkWhereInput;
  AND?: MovieLinkSubscriptionWhereInput[] | MovieLinkSubscriptionWhereInput;
  OR?: MovieLinkSubscriptionWhereInput[] | MovieLinkSubscriptionWhereInput;
  NOT?: MovieLinkSubscriptionWhereInput[] | MovieLinkSubscriptionWhereInput;
}

export interface UserCreateOneWithoutFriendRequestsReceivedInput {
  create?: UserCreateWithoutFriendRequestsReceivedInput;
  connect?: UserWhereUniqueInput;
}

export interface FriendRequestWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  source?: UserWhereInput;
  target?: UserWhereInput;
  status?: FriendRequestStatus;
  status_not?: FriendRequestStatus;
  status_in?: FriendRequestStatus[] | FriendRequestStatus;
  status_not_in?: FriendRequestStatus[] | FriendRequestStatus;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: FriendRequestWhereInput[] | FriendRequestWhereInput;
  OR?: FriendRequestWhereInput[] | FriendRequestWhereInput;
  NOT?: FriendRequestWhereInput[] | FriendRequestWhereInput;
}

export interface UserCreateWithoutFriendRequestsReceivedInput {
  email: String;
  password: String;
  nickname: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestCreateManyWithoutSourceInput;
  movieLinks?: MovieLinkCreateManyWithoutUserInput;
  rooms?: RoomCreateManyWithoutMembersInput;
  ownedRooms?: RoomCreateManyWithoutOwnerInput;
}

export interface UserUpdateInput {
  email?: String;
  password?: String;
  nickname?: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestUpdateManyWithoutSourceInput;
  friendRequestsReceived?: FriendRequestUpdateManyWithoutTargetInput;
  movieLinks?: MovieLinkUpdateManyWithoutUserInput;
  rooms?: RoomUpdateManyWithoutMembersInput;
  ownedRooms?: RoomUpdateManyWithoutOwnerInput;
}

export interface RoomCreateManyWithoutOwnerInput {
  create?: RoomCreateWithoutOwnerInput[] | RoomCreateWithoutOwnerInput;
  connect?: RoomWhereUniqueInput[] | RoomWhereUniqueInput;
}

export interface RoomUpdateInput {
  type?: RoomType;
  name?: String;
  owner?: UserUpdateOneRequiredWithoutOwnedRoomsInput;
  members?: UserUpdateManyWithoutRoomsInput;
}

export interface RoomCreateWithoutOwnerInput {
  type: RoomType;
  name: String;
  members?: UserCreateManyWithoutRoomsInput;
}

export interface UserUpsertWithoutMovieLinksInput {
  update: UserUpdateWithoutMovieLinksDataInput;
  create: UserCreateWithoutMovieLinksInput;
}

export interface UserCreateManyWithoutRoomsInput {
  create?: UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpdateWithoutMovieLinksDataInput {
  email?: String;
  password?: String;
  nickname?: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestUpdateManyWithoutSourceInput;
  friendRequestsReceived?: FriendRequestUpdateManyWithoutTargetInput;
  rooms?: RoomUpdateManyWithoutMembersInput;
  ownedRooms?: RoomUpdateManyWithoutOwnerInput;
}

export interface UserCreateWithoutRoomsInput {
  email: String;
  password: String;
  nickname: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestCreateManyWithoutSourceInput;
  friendRequestsReceived?: FriendRequestCreateManyWithoutTargetInput;
  movieLinks?: MovieLinkCreateManyWithoutUserInput;
  ownedRooms?: RoomCreateManyWithoutOwnerInput;
}

export interface MovieUpsertWithoutMovieLinksInput {
  update: MovieUpdateWithoutMovieLinksDataInput;
  create: MovieCreateWithoutMovieLinksInput;
}

export interface FriendRequestUpdateInput {
  source?: UserUpdateOneRequiredWithoutFriendRequestsEmittedInput;
  target?: UserUpdateOneRequiredWithoutFriendRequestsReceivedInput;
  status?: FriendRequestStatus;
}

export interface MovieUpdateOneRequiredWithoutMovieLinksInput {
  create?: MovieCreateWithoutMovieLinksInput;
  update?: MovieUpdateWithoutMovieLinksDataInput;
  upsert?: MovieUpsertWithoutMovieLinksInput;
  connect?: MovieWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutFriendRequestsEmittedInput {
  create?: UserCreateWithoutFriendRequestsEmittedInput;
  update?: UserUpdateWithoutFriendRequestsEmittedDataInput;
  upsert?: UserUpsertWithoutFriendRequestsEmittedInput;
  connect?: UserWhereUniqueInput;
}

export interface MovieLinkCreateInput {
  watched?: Boolean;
  watchlisted?: Boolean;
  movie: MovieCreateOneWithoutMovieLinksInput;
  user: UserCreateOneWithoutMovieLinksInput;
}

export interface MovieCreateInput {
  tmdbId?: String;
  imdbId?: String;
  traktId?: String;
  movieLinks?: MovieLinkCreateManyWithoutMovieInput;
}

export interface MovieLinkUpdateManyWithoutMovieInput {
  create?:
    | MovieLinkCreateWithoutMovieInput[]
    | MovieLinkCreateWithoutMovieInput;
}

export interface FriendRequestUpdateManyWithoutTargetInput {
  create?:
    | FriendRequestCreateWithoutTargetInput[]
    | FriendRequestCreateWithoutTargetInput;
  delete?: FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput;
  connect?: FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput;
  disconnect?: FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput;
  update?:
    | FriendRequestUpdateWithWhereUniqueWithoutTargetInput[]
    | FriendRequestUpdateWithWhereUniqueWithoutTargetInput;
  upsert?:
    | FriendRequestUpsertWithWhereUniqueWithoutTargetInput[]
    | FriendRequestUpsertWithWhereUniqueWithoutTargetInput;
}

export interface UserCreateWithoutMovieLinksInput {
  email: String;
  password: String;
  nickname: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestCreateManyWithoutSourceInput;
  friendRequestsReceived?: FriendRequestCreateManyWithoutTargetInput;
  rooms?: RoomCreateManyWithoutMembersInput;
  ownedRooms?: RoomCreateManyWithoutOwnerInput;
}

export interface FriendRequestUpdateWithWhereUniqueWithoutTargetInput {
  where: FriendRequestWhereUniqueInput;
  data: FriendRequestUpdateWithoutTargetDataInput;
}

export interface UserCreateOneWithoutMovieLinksInput {
  create?: UserCreateWithoutMovieLinksInput;
  connect?: UserWhereUniqueInput;
}

export interface FriendRequestUpdateWithoutTargetDataInput {
  source?: UserUpdateOneRequiredWithoutFriendRequestsEmittedInput;
  status?: FriendRequestStatus;
}

export interface MovieLinkCreateManyWithoutMovieInput {
  create?:
    | MovieLinkCreateWithoutMovieInput[]
    | MovieLinkCreateWithoutMovieInput;
}

export interface FriendRequestUpsertWithWhereUniqueWithoutTargetInput {
  where: FriendRequestWhereUniqueInput;
  update: FriendRequestUpdateWithoutTargetDataInput;
  create: FriendRequestCreateWithoutTargetInput;
}

export interface FriendRequestCreateInput {
  source: UserCreateOneWithoutFriendRequestsEmittedInput;
  target: UserCreateOneWithoutFriendRequestsReceivedInput;
  status?: FriendRequestStatus;
}

export interface RoomWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: RoomType;
  type_not?: RoomType;
  type_in?: RoomType[] | RoomType;
  type_not_in?: RoomType[] | RoomType;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  owner?: UserWhereInput;
  members_every?: UserWhereInput;
  members_some?: UserWhereInput;
  members_none?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RoomWhereInput[] | RoomWhereInput;
  OR?: RoomWhereInput[] | RoomWhereInput;
  NOT?: RoomWhereInput[] | RoomWhereInput;
}

export interface UserCreateWithoutFriendRequestsEmittedInput {
  email: String;
  password: String;
  nickname: String;
  firstName?: String;
  lastName?: String;
  friendRequestsReceived?: FriendRequestCreateManyWithoutTargetInput;
  movieLinks?: MovieLinkCreateManyWithoutUserInput;
  rooms?: RoomCreateManyWithoutMembersInput;
  ownedRooms?: RoomCreateManyWithoutOwnerInput;
}

export interface RoomUpdateManyWithoutMembersInput {
  create?: RoomCreateWithoutMembersInput[] | RoomCreateWithoutMembersInput;
  delete?: RoomWhereUniqueInput[] | RoomWhereUniqueInput;
  connect?: RoomWhereUniqueInput[] | RoomWhereUniqueInput;
  disconnect?: RoomWhereUniqueInput[] | RoomWhereUniqueInput;
  update?:
    | RoomUpdateWithWhereUniqueWithoutMembersInput[]
    | RoomUpdateWithWhereUniqueWithoutMembersInput;
  upsert?:
    | RoomUpsertWithWhereUniqueWithoutMembersInput[]
    | RoomUpsertWithWhereUniqueWithoutMembersInput;
}

export interface FriendRequestCreateWithoutTargetInput {
  source: UserCreateOneWithoutFriendRequestsEmittedInput;
  status?: FriendRequestStatus;
}

export interface RoomUpdateWithWhereUniqueWithoutMembersInput {
  where: RoomWhereUniqueInput;
  data: RoomUpdateWithoutMembersDataInput;
}

export interface MovieLinkCreateWithoutUserInput {
  watched?: Boolean;
  watchlisted?: Boolean;
  movie: MovieCreateOneWithoutMovieLinksInput;
}

export interface RoomUpdateWithoutMembersDataInput {
  type?: RoomType;
  name?: String;
  owner?: UserUpdateOneRequiredWithoutOwnedRoomsInput;
}

export interface MovieCreateWithoutMovieLinksInput {
  tmdbId?: String;
  imdbId?: String;
  traktId?: String;
}

export interface UserUpdateOneRequiredWithoutOwnedRoomsInput {
  create?: UserCreateWithoutOwnedRoomsInput;
  update?: UserUpdateWithoutOwnedRoomsDataInput;
  upsert?: UserUpsertWithoutOwnedRoomsInput;
  connect?: UserWhereUniqueInput;
}

export interface MovieWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tmdbId?: String;
  tmdbId_not?: String;
  tmdbId_in?: String[] | String;
  tmdbId_not_in?: String[] | String;
  tmdbId_lt?: String;
  tmdbId_lte?: String;
  tmdbId_gt?: String;
  tmdbId_gte?: String;
  tmdbId_contains?: String;
  tmdbId_not_contains?: String;
  tmdbId_starts_with?: String;
  tmdbId_not_starts_with?: String;
  tmdbId_ends_with?: String;
  tmdbId_not_ends_with?: String;
  imdbId?: String;
  imdbId_not?: String;
  imdbId_in?: String[] | String;
  imdbId_not_in?: String[] | String;
  imdbId_lt?: String;
  imdbId_lte?: String;
  imdbId_gt?: String;
  imdbId_gte?: String;
  imdbId_contains?: String;
  imdbId_not_contains?: String;
  imdbId_starts_with?: String;
  imdbId_not_starts_with?: String;
  imdbId_ends_with?: String;
  imdbId_not_ends_with?: String;
  traktId?: String;
  traktId_not?: String;
  traktId_in?: String[] | String;
  traktId_not_in?: String[] | String;
  traktId_lt?: String;
  traktId_lte?: String;
  traktId_gt?: String;
  traktId_gte?: String;
  traktId_contains?: String;
  traktId_not_contains?: String;
  traktId_starts_with?: String;
  traktId_not_starts_with?: String;
  traktId_ends_with?: String;
  traktId_not_ends_with?: String;
  movieLinks_every?: MovieLinkWhereInput;
  movieLinks_some?: MovieLinkWhereInput;
  movieLinks_none?: MovieLinkWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: MovieWhereInput[] | MovieWhereInput;
  OR?: MovieWhereInput[] | MovieWhereInput;
  NOT?: MovieWhereInput[] | MovieWhereInput;
}

export interface UserUpdateWithoutOwnedRoomsDataInput {
  email?: String;
  password?: String;
  nickname?: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestUpdateManyWithoutSourceInput;
  friendRequestsReceived?: FriendRequestUpdateManyWithoutTargetInput;
  movieLinks?: MovieLinkUpdateManyWithoutUserInput;
  rooms?: RoomUpdateManyWithoutMembersInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  nickname?: String;
  nickname_not?: String;
  nickname_in?: String[] | String;
  nickname_not_in?: String[] | String;
  nickname_lt?: String;
  nickname_lte?: String;
  nickname_gt?: String;
  nickname_gte?: String;
  nickname_contains?: String;
  nickname_not_contains?: String;
  nickname_starts_with?: String;
  nickname_not_starts_with?: String;
  nickname_ends_with?: String;
  nickname_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  friendRequestsEmitted_every?: FriendRequestWhereInput;
  friendRequestsEmitted_some?: FriendRequestWhereInput;
  friendRequestsEmitted_none?: FriendRequestWhereInput;
  friendRequestsReceived_every?: FriendRequestWhereInput;
  friendRequestsReceived_some?: FriendRequestWhereInput;
  friendRequestsReceived_none?: FriendRequestWhereInput;
  movieLinks_every?: MovieLinkWhereInput;
  movieLinks_some?: MovieLinkWhereInput;
  movieLinks_none?: MovieLinkWhereInput;
  rooms_every?: RoomWhereInput;
  rooms_some?: RoomWhereInput;
  rooms_none?: RoomWhereInput;
  ownedRooms_every?: RoomWhereInput;
  ownedRooms_some?: RoomWhereInput;
  ownedRooms_none?: RoomWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface FriendRequestUpdateManyWithoutSourceInput {
  create?:
    | FriendRequestCreateWithoutSourceInput[]
    | FriendRequestCreateWithoutSourceInput;
  delete?: FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput;
  connect?: FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput;
  disconnect?: FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput;
  update?:
    | FriendRequestUpdateWithWhereUniqueWithoutSourceInput[]
    | FriendRequestUpdateWithWhereUniqueWithoutSourceInput;
  upsert?:
    | FriendRequestUpsertWithWhereUniqueWithoutSourceInput[]
    | FriendRequestUpsertWithWhereUniqueWithoutSourceInput;
}

export interface FriendRequestSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FriendRequestWhereInput;
  AND?:
    | FriendRequestSubscriptionWhereInput[]
    | FriendRequestSubscriptionWhereInput;
  OR?:
    | FriendRequestSubscriptionWhereInput[]
    | FriendRequestSubscriptionWhereInput;
  NOT?:
    | FriendRequestSubscriptionWhereInput[]
    | FriendRequestSubscriptionWhereInput;
}

export interface FriendRequestUpdateWithWhereUniqueWithoutSourceInput {
  where: FriendRequestWhereUniqueInput;
  data: FriendRequestUpdateWithoutSourceDataInput;
}

export interface RoomCreateInput {
  type: RoomType;
  name: String;
  owner: UserCreateOneWithoutOwnedRoomsInput;
  members?: UserCreateManyWithoutRoomsInput;
}

export interface FriendRequestUpdateWithoutSourceDataInput {
  target?: UserUpdateOneRequiredWithoutFriendRequestsReceivedInput;
  status?: FriendRequestStatus;
}

export interface UserUpdateOneRequiredWithoutMovieLinksInput {
  create?: UserCreateWithoutMovieLinksInput;
  update?: UserUpdateWithoutMovieLinksDataInput;
  upsert?: UserUpsertWithoutMovieLinksInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneRequiredWithoutFriendRequestsReceivedInput {
  create?: UserCreateWithoutFriendRequestsReceivedInput;
  update?: UserUpdateWithoutFriendRequestsReceivedDataInput;
  upsert?: UserUpsertWithoutFriendRequestsReceivedInput;
  connect?: UserWhereUniqueInput;
}

export interface MovieLinkUpdateInput {
  watched?: Boolean;
  watchlisted?: Boolean;
  movie?: MovieUpdateOneRequiredWithoutMovieLinksInput;
  user?: UserUpdateOneRequiredWithoutMovieLinksInput;
}

export interface UserUpdateWithoutFriendRequestsReceivedDataInput {
  email?: String;
  password?: String;
  nickname?: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestUpdateManyWithoutSourceInput;
  movieLinks?: MovieLinkUpdateManyWithoutUserInput;
  rooms?: RoomUpdateManyWithoutMembersInput;
  ownedRooms?: RoomUpdateManyWithoutOwnerInput;
}

export interface MovieUpdateInput {
  tmdbId?: String;
  imdbId?: String;
  traktId?: String;
  movieLinks?: MovieLinkUpdateManyWithoutMovieInput;
}

export interface RoomUpdateManyWithoutOwnerInput {
  create?: RoomCreateWithoutOwnerInput[] | RoomCreateWithoutOwnerInput;
  delete?: RoomWhereUniqueInput[] | RoomWhereUniqueInput;
  connect?: RoomWhereUniqueInput[] | RoomWhereUniqueInput;
  disconnect?: RoomWhereUniqueInput[] | RoomWhereUniqueInput;
  update?:
    | RoomUpdateWithWhereUniqueWithoutOwnerInput[]
    | RoomUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | RoomUpsertWithWhereUniqueWithoutOwnerInput[]
    | RoomUpsertWithWhereUniqueWithoutOwnerInput;
}

export interface MovieLinkCreateWithoutMovieInput {
  watched?: Boolean;
  watchlisted?: Boolean;
  user: UserCreateOneWithoutMovieLinksInput;
}

export interface RoomUpdateWithWhereUniqueWithoutOwnerInput {
  where: RoomWhereUniqueInput;
  data: RoomUpdateWithoutOwnerDataInput;
}

export interface UserCreateOneWithoutFriendRequestsEmittedInput {
  create?: UserCreateWithoutFriendRequestsEmittedInput;
  connect?: UserWhereUniqueInput;
}

export interface RoomUpdateWithoutOwnerDataInput {
  type?: RoomType;
  name?: String;
  members?: UserUpdateManyWithoutRoomsInput;
}

export interface MovieLinkCreateManyWithoutUserInput {
  create?: MovieLinkCreateWithoutUserInput[] | MovieLinkCreateWithoutUserInput;
}

export interface UserUpdateManyWithoutRoomsInput {
  create?: UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutRoomsInput[]
    | UserUpdateWithWhereUniqueWithoutRoomsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutRoomsInput[]
    | UserUpsertWithWhereUniqueWithoutRoomsInput;
}

export interface RoomCreateManyWithoutMembersInput {
  create?: RoomCreateWithoutMembersInput[] | RoomCreateWithoutMembersInput;
  connect?: RoomWhereUniqueInput[] | RoomWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRoomsDataInput;
}

export interface MovieSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MovieWhereInput;
  AND?: MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput;
  OR?: MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput;
  NOT?: MovieSubscriptionWhereInput[] | MovieSubscriptionWhereInput;
}

export interface UserUpdateWithoutRoomsDataInput {
  email?: String;
  password?: String;
  nickname?: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestUpdateManyWithoutSourceInput;
  friendRequestsReceived?: FriendRequestUpdateManyWithoutTargetInput;
  movieLinks?: MovieLinkUpdateManyWithoutUserInput;
  ownedRooms?: RoomUpdateManyWithoutOwnerInput;
}

export type MovieWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  tmdbId?: String;
  imdbId?: String;
  traktId?: String;
}>;

export interface UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRoomsDataInput;
  create: UserCreateWithoutRoomsInput;
}

export type RoomWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface RoomUpsertWithWhereUniqueWithoutOwnerInput {
  where: RoomWhereUniqueInput;
  update: RoomUpdateWithoutOwnerDataInput;
  create: RoomCreateWithoutOwnerInput;
}

export interface MovieCreateOneWithoutMovieLinksInput {
  create?: MovieCreateWithoutMovieLinksInput;
  connect?: MovieWhereUniqueInput;
}

export interface RoomUpsertWithWhereUniqueWithoutMembersInput {
  where: RoomWhereUniqueInput;
  update: RoomUpdateWithoutMembersDataInput;
  create: RoomCreateWithoutMembersInput;
}

export interface UserUpsertWithoutOwnedRoomsInput {
  update: UserUpdateWithoutOwnedRoomsDataInput;
  create: UserCreateWithoutOwnedRoomsInput;
}

export interface FriendRequestUpsertWithWhereUniqueWithoutSourceInput {
  where: FriendRequestWhereUniqueInput;
  update: FriendRequestUpdateWithoutSourceDataInput;
  create: FriendRequestCreateWithoutSourceInput;
}

export interface UserUpsertWithoutFriendRequestsReceivedInput {
  update: UserUpdateWithoutFriendRequestsReceivedDataInput;
  create: UserCreateWithoutFriendRequestsReceivedInput;
}

export interface MovieLinkWhereInput {
  watched?: Boolean;
  watched_not?: Boolean;
  watchlisted?: Boolean;
  watchlisted_not?: Boolean;
  movie?: MovieWhereInput;
  user?: UserWhereInput;
  AND?: MovieLinkWhereInput[] | MovieLinkWhereInput;
  OR?: MovieLinkWhereInput[] | MovieLinkWhereInput;
  NOT?: MovieLinkWhereInput[] | MovieLinkWhereInput;
}

export interface FriendRequestCreateManyWithoutTargetInput {
  create?:
    | FriendRequestCreateWithoutTargetInput[]
    | FriendRequestCreateWithoutTargetInput;
  connect?: FriendRequestWhereUniqueInput[] | FriendRequestWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  nickname?: String;
}>;

export interface MovieUpdateWithoutMovieLinksDataInput {
  tmdbId?: String;
  imdbId?: String;
  traktId?: String;
}

export interface UserCreateInput {
  email: String;
  password: String;
  nickname: String;
  firstName?: String;
  lastName?: String;
  friendRequestsEmitted?: FriendRequestCreateManyWithoutSourceInput;
  friendRequestsReceived?: FriendRequestCreateManyWithoutTargetInput;
  movieLinks?: MovieLinkCreateManyWithoutUserInput;
  rooms?: RoomCreateManyWithoutMembersInput;
  ownedRooms?: RoomCreateManyWithoutOwnerInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
  password: String;
  nickname: String;
  firstName?: String;
  lastName?: String;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  nickname: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FriendRequestEdgeNode {
  cursor: String;
}

export interface FriendRequestEdge
  extends Promise<FriendRequestEdgeNode>,
    Fragmentable {
  node: <T = FriendRequest>() => T;
  cursor: () => Promise<String>;
}

export interface FriendRequestEdgeSubscription
  extends Promise<AsyncIterator<FriendRequestEdgeNode>>,
    Fragmentable {
  node: <T = FriendRequestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RoomSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RoomSubscriptionPayload
  extends Promise<RoomSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Room>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValues>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface FriendRequestConnectionNode {}

export interface FriendRequestConnection
  extends Promise<FriendRequestConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<FriendRequestEdgeNode>>() => T;
  aggregate: <T = AggregateFriendRequest>() => T;
}

export interface FriendRequestConnectionSubscription
  extends Promise<AsyncIterator<FriendRequestConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FriendRequestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFriendRequestSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface RoomPreviousValuesNode {
  id: ID_Output;
  type: RoomType;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoomPreviousValues
  extends Promise<RoomPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<RoomType>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<RoomType>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomEdgeNode {
  cursor: String;
}

export interface RoomEdge extends Promise<RoomEdgeNode>, Fragmentable {
  node: <T = Room>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdgeNode>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RoomNode {
  id: ID_Output;
  type: RoomType;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Room extends Promise<RoomNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<RoomType>;
  name: () => Promise<String>;
  owner: <T = User>() => T;
  members: <T = FragmentableArray<UserNode>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<RoomNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<RoomType>>;
  name: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateMovieLinkNode {
  count: Int;
}

export interface AggregateMovieLink
  extends Promise<AggregateMovieLinkNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMovieLinkSubscription
  extends Promise<AsyncIterator<AggregateMovieLinkNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FriendRequestNode {
  id: ID_Output;
  status: FriendRequestStatus;
  createdAt: DateTimeOutput;
}

export interface FriendRequest
  extends Promise<FriendRequestNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  source: <T = User>() => T;
  target: <T = User>() => T;
  status: () => Promise<FriendRequestStatus>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FriendRequestSubscription
  extends Promise<AsyncIterator<FriendRequestNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  source: <T = UserSubscription>() => T;
  target: <T = UserSubscription>() => T;
  status: () => Promise<AsyncIterator<FriendRequestStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MovieLinkConnectionNode {}

export interface MovieLinkConnection
  extends Promise<MovieLinkConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<MovieLinkEdgeNode>>() => T;
  aggregate: <T = AggregateMovieLink>() => T;
}

export interface MovieLinkConnectionSubscription
  extends Promise<AsyncIterator<MovieLinkConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MovieLinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMovieLinkSubscription>() => T;
}

export interface FriendRequestSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface FriendRequestSubscriptionPayload
  extends Promise<FriendRequestSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FriendRequest>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FriendRequestPreviousValues>() => T;
}

export interface FriendRequestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FriendRequestSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FriendRequestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FriendRequestPreviousValuesSubscription>() => T;
}

export interface MovieEdgeNode {
  cursor: String;
}

export interface MovieEdge extends Promise<MovieEdgeNode>, Fragmentable {
  node: <T = Movie>() => T;
  cursor: () => Promise<String>;
}

export interface MovieEdgeSubscription
  extends Promise<AsyncIterator<MovieEdgeNode>>,
    Fragmentable {
  node: <T = MovieSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FriendRequestPreviousValuesNode {
  id: ID_Output;
  status: FriendRequestStatus;
  createdAt: DateTimeOutput;
}

export interface FriendRequestPreviousValues
  extends Promise<FriendRequestPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<FriendRequestStatus>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface FriendRequestPreviousValuesSubscription
  extends Promise<AsyncIterator<FriendRequestPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<FriendRequestStatus>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNode {
  id: ID_Output;
  email: String;
  password: String;
  nickname: String;
  firstName?: String;
  lastName?: String;
  createdAt: DateTimeOutput;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  nickname: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  friendRequestsEmitted: <T = FragmentableArray<FriendRequestNode>>(
    args?: {
      where?: FriendRequestWhereInput;
      orderBy?: FriendRequestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  friendRequestsReceived: <T = FragmentableArray<FriendRequestNode>>(
    args?: {
      where?: FriendRequestWhereInput;
      orderBy?: FriendRequestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  movieLinks: <T = FragmentableArray<MovieLinkNode>>(
    args?: {
      where?: MovieLinkWhereInput;
      orderBy?: MovieLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  rooms: <T = FragmentableArray<RoomNode>>(
    args?: {
      where?: RoomWhereInput;
      orderBy?: RoomOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  ownedRooms: <T = FragmentableArray<RoomNode>>(
    args?: {
      where?: RoomWhereInput;
      orderBy?: RoomOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  friendRequestsEmitted: <
    T = Promise<AsyncIterator<FriendRequestSubscription>>
  >(
    args?: {
      where?: FriendRequestWhereInput;
      orderBy?: FriendRequestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  friendRequestsReceived: <
    T = Promise<AsyncIterator<FriendRequestSubscription>>
  >(
    args?: {
      where?: FriendRequestWhereInput;
      orderBy?: FriendRequestOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  movieLinks: <T = Promise<AsyncIterator<MovieLinkSubscription>>>(
    args?: {
      where?: MovieLinkWhereInput;
      orderBy?: MovieLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  rooms: <T = Promise<AsyncIterator<RoomSubscription>>>(
    args?: {
      where?: RoomWhereInput;
      orderBy?: RoomOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  ownedRooms: <T = Promise<AsyncIterator<RoomSubscription>>>(
    args?: {
      where?: RoomWhereInput;
      orderBy?: RoomOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MovieNode {
  id: ID_Output;
  tmdbId?: String;
  imdbId?: String;
  traktId?: String;
  createdAt: DateTimeOutput;
}

export interface Movie extends Promise<MovieNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  tmdbId: () => Promise<String>;
  imdbId: () => Promise<String>;
  traktId: () => Promise<String>;
  movieLinks: <T = FragmentableArray<MovieLinkNode>>(
    args?: {
      where?: MovieLinkWhereInput;
      orderBy?: MovieLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MovieSubscription
  extends Promise<AsyncIterator<MovieNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tmdbId: () => Promise<AsyncIterator<String>>;
  imdbId: () => Promise<AsyncIterator<String>>;
  traktId: () => Promise<AsyncIterator<String>>;
  movieLinks: <T = Promise<AsyncIterator<MovieLinkSubscription>>>(
    args?: {
      where?: MovieLinkWhereInput;
      orderBy?: MovieLinkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MovieSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MovieSubscriptionPayload
  extends Promise<MovieSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Movie>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MoviePreviousValues>() => T;
}

export interface MovieSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MovieSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MovieSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MoviePreviousValuesSubscription>() => T;
}

export interface RoomConnectionNode {}

export interface RoomConnection
  extends Promise<RoomConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<RoomEdgeNode>>() => T;
  aggregate: <T = AggregateRoom>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface AggregateMovieNode {
  count: Int;
}

export interface AggregateMovie
  extends Promise<AggregateMovieNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMovieSubscription
  extends Promise<AsyncIterator<AggregateMovieNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MovieLinkPreviousValuesNode {
  watched: Boolean;
  watchlisted: Boolean;
}

export interface MovieLinkPreviousValues
  extends Promise<MovieLinkPreviousValuesNode>,
    Fragmentable {
  watched: () => Promise<Boolean>;
  watchlisted: () => Promise<Boolean>;
}

export interface MovieLinkPreviousValuesSubscription
  extends Promise<AsyncIterator<MovieLinkPreviousValuesNode>>,
    Fragmentable {
  watched: () => Promise<AsyncIterator<Boolean>>;
  watchlisted: () => Promise<AsyncIterator<Boolean>>;
}

export interface MovieLinkSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MovieLinkSubscriptionPayload
  extends Promise<MovieLinkSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MovieLink>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MovieLinkPreviousValues>() => T;
}

export interface MovieLinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MovieLinkSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MovieLinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MovieLinkPreviousValuesSubscription>() => T;
}

export interface MovieLinkNode {
  watched: Boolean;
  watchlisted: Boolean;
}

export interface MovieLink extends Promise<MovieLinkNode>, Fragmentable {
  watched: () => Promise<Boolean>;
  watchlisted: () => Promise<Boolean>;
  movie: <T = Movie>() => T;
  user: <T = User>() => T;
}

export interface MovieLinkSubscription
  extends Promise<AsyncIterator<MovieLinkNode>>,
    Fragmentable {
  watched: () => Promise<AsyncIterator<Boolean>>;
  watchlisted: () => Promise<AsyncIterator<Boolean>>;
  movie: <T = MovieSubscription>() => T;
  user: <T = UserSubscription>() => T;
}

export interface MoviePreviousValuesNode {
  id: ID_Output;
  tmdbId?: String;
  imdbId?: String;
  traktId?: String;
  createdAt: DateTimeOutput;
}

export interface MoviePreviousValues
  extends Promise<MoviePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tmdbId: () => Promise<String>;
  imdbId: () => Promise<String>;
  traktId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface MoviePreviousValuesSubscription
  extends Promise<AsyncIterator<MoviePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tmdbId: () => Promise<AsyncIterator<String>>;
  imdbId: () => Promise<AsyncIterator<String>>;
  traktId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MovieConnectionNode {}

export interface MovieConnection
  extends Promise<MovieConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<MovieEdgeNode>>() => T;
  aggregate: <T = AggregateMovie>() => T;
}

export interface MovieConnectionSubscription
  extends Promise<AsyncIterator<MovieConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MovieEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMovieSubscription>() => T;
}

export interface MovieLinkEdgeNode {
  cursor: String;
}

export interface MovieLinkEdge
  extends Promise<MovieLinkEdgeNode>,
    Fragmentable {
  node: <T = MovieLink>() => T;
  cursor: () => Promise<String>;
}

export interface MovieLinkEdgeSubscription
  extends Promise<AsyncIterator<MovieLinkEdgeNode>>,
    Fragmentable {
  node: <T = MovieLinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoomNode {
  count: Int;
}

export interface AggregateRoom
  extends Promise<AggregateRoomNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoomNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateFriendRequestNode {
  count: Int;
}

export interface AggregateFriendRequest
  extends Promise<AggregateFriendRequestNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFriendRequestSubscription
  extends Promise<AsyncIterator<AggregateFriendRequestNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `http://localhost:4466`,
});
export const prisma = new Prisma();
